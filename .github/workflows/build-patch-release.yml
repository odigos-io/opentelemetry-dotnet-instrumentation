name: Build and Release Patched Repo

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC (adjust as needed)

permissions:
  contents: write  # Needed to push updated submodule references, create releases, etc.

env:
  ORIGINAL_REPO: open-telemetry/opentelemetry-dotnet-instrumentation

jobs:
  check-latest-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.determine_release.outputs.version }}
      has_new_release: ${{ steps.determine_release.outputs.has_new_release }}

    steps:
      - name: Check out this repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine latest upstream version
        id: get_upstream_release
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ env.ORIGINAL_REPO }}/releases/latest | jq -r '.tag_name')
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_OUTPUT

      - name: Determine if release is new
        id: determine_release
        run: |
          LATEST_RELEASE="${{ steps.get_upstream_release.outputs.LATEST_RELEASE }}"
          CURRENT_VERSION="$(cat version.txt || echo 'none')"

          echo "Found upstream version: $LATEST_RELEASE"
          echo "Current local version: $CURRENT_VERSION"

          if [ "$LATEST_RELEASE" != "$CURRENT_VERSION" ]; then
            echo "New release found!"
            echo "version=$LATEST_RELEASE" >> $GITHUB_OUTPUT
            echo "has_new_release=true" >> $GITHUB_OUTPUT
          else
            echo "Already up to date."
            echo "version=$LATEST_RELEASE" >> $GITHUB_OUTPUT
            echo "has_new_release=false" >> $GITHUB_OUTPUT
          fi
  build-and-publish:
    runs-on: ubuntu-latest
    needs: check-latest-release
    if: ${{ needs.check-latest-release.outputs.has_new_release == 'true' }}

    steps:
      - name: Check out this repository
        uses: actions/checkout@v3
      - name: Update submodule to new release tag
        run: |
          git submodule update --init --recursive
          cd source
          git fetch origin --tags
          git checkout ${{ needs.check-latest-release.outputs.version }}
          cd ..
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add source
          if ! git diff-index --quiet HEAD; then
          git commit -m "Update submodule to ${{ needs.check-latest-release.outputs.version }}"
          git push
          else
          echo "No changes to commit"
          fi
      - name: Overwrite patched files
        run: |
          cp -r ./patched/* ./source/

      - name: Build Docker image
        run: |
          cd source/docker
          docker build -t dev/dotnet-builder:dev . -f debian.dockerfile

      - name: Build native library
        run: |
          cd source
          docker run -e OS_TYPE=linux-glibc --rm \
            -v "$(pwd)":/project \
            dev/dotnet-builder:dev \
            ./build.sh buildNativeWorkflow

      - name: Show file size
        run: |
          cd source
          ls -lh src/OpenTelemetry.AutoInstrumentation.Native/build/bin/OpenTelemetry.AutoInstrumentation.Native.so

      - name: Create release in this repo
        id: create_release
        uses: actions/create-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: "${{ needs.check-latest-release.outputs.version }}"
          release_name: "${{ needs.check-latest-release.outputs.version }}"
          draft: false
          prerelease: false

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: source/src/OpenTelemetry.AutoInstrumentation.Native/build/bin/OpenTelemetry.AutoInstrumentation.Native.so
          asset_name: OpenTelemetry.AutoInstrumentation.Native.so
          asset_content_type: application/octet-stream

      - name: Update version.txt
        run: |
          echo "${{ needs.check-latest-release.outputs.version }}" > version.txt

      - name: Commit and push version.txt
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add version.txt
          git commit -m "Update version.txt to ${{ needs.check-latest-release.outputs.version }}"
          git push
